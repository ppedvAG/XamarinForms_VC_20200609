<?xml version="1.0" encoding="utf-8" ?>
<!--vgl. CodeBehind-->
    
<!--Jede XAML-Datei hat einen Root-Container, welcher die Art der UI bestimmt. Dieser muss mit der Mutterklasse im CodeBehind übereinstimmen-->
<!--Im Root-Container werden die in diesem Dokument benutzten Namespaces definiert, sowie der Verweis auf die anhängige Klasse (CodeBehind)-->
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:d="http://xamarin.com/schemas/2014/forms/design"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             x:Class="XamarinForms_20200609.MainPage"
             xmlns:local="clr-namespace:XamarinForms_20200609">
    <!--Jeder Container hat eine Resource-Property, in welcher Ressourcen (Objekte, Styles, Converter, ...) für diesen 
    Container bereit gestellt werden können.-->
    <ContentPage.Resources>
        <!--Über das Präfix (Zeichen vor dem Doppelpunkt) wird der entsprechende Namespace angesteuert-->
        <!--Jede Ressource (außer globalen Styles) benötigen einen Key, über welche diese angersteuert werden können.-->
        <x:String x:Key="btnText">Hallo Welt, wie gehts</x:String>
        <x:Double x:Key="btnFontSize">24.0</x:Double>
        <local:FaktorConverter x:Key="factorConverter"/>
    </ContentPage.Resources>

    <!--Properties können direkt im einleitenden Tag mittels der Attribute gesetzt werden.-->
    <!--Vertical und HorizontalObptions definieren das Anzeige-Verhalten des UI-Elements in Bezug auf umgebende Objekte-->
    <!--Padding definiert einen Abstand des UI-Elements zu inneren Elementen-->
    <ScrollView HorizontalOptions="FillAndExpand"
                VerticalOptions="FillAndExpand"
                 Padding="10, 20, 30, 40">

        <!--Container, welche die Children-Property besitzen können mehrere Elemente beinhalten-->
        <StackLayout Orientation="Vertical"
                 Spacing="10"
                 HorizontalOptions="FillAndExpand"
                 VerticalOptions="FillAndExpand">

            <!--Mittels einer StaticResource-Bindung kann auf in übergeordneten Container definierte Ressourcen zugegriffen werden-->
            <Label x:Name="Lbl_Eins" 
                Text="{StaticResource btnText}"
                HorizontalOptions="Center">
                <!--Wenn Properties mit komplexeren Elementen gefüllt werden sollen, können diese ausgelagert werden.-->
                <Label.TextColor>
                    
                    <!--Unterschiedliche Werte auf verschiedenen OS in derselben Property-->
                    <!--<OnPlatform Android="Blue" iOS="Red" UWP="Green"/>-->
                    
                    <!--Unterschiedliche Werte auf verschiedenen Geräten in derselben Property-->
                    <OnIdiom Phone="Red" Tablet="Blue"/>
                    
                </Label.TextColor>
            </Label>

            <!--Jedes UI-Element hat eien Standart-Property, auf die direkt zugegriffen werden kann (meißt Text, Children, Content)-->
            <Label HorizontalOptions="Center">
                Hallo Welt
            </Label>

            <!--Button: UI-Element zum Ausführen von Events (Insb. Click-Event)-->
            <!--Dieser Button nimmt den globalen Button-Style an (vgl. RessourceDict.xaml)-->
            <Button x:Name="Btn_KlickMich" 
                    Text="{StaticResource btnText}"
                    FontSize="{StaticResource btnFontSize}"
                    Clicked="Btn_KlickMich_Clicked"/>
            <!--Dieser Button nimmt einen explizieten Button-Style an (vgl. RessourceDict.xaml)-->
            <Button Text="Expliziet"
                    Style="{StaticResource btnStyle}"/>
            <!--Grafische Ressourcen müssen in den einzelnen OS-Projekten abgelegt sein (z.B. Android/Resources/drawable)-->
            <ImageButton Source="test.png"
                        WidthRequest="50"/>
            
            <!--Bindungen-->
            <!--Mittels Bindungen können Properties von UI-Elementen miteinander verknüpft werden.-->
            <StackLayout Orientation="Horizontal">
                <Slider Minimum="0"
                        Maximum="100"
                        x:Name="Sdr_Binding"
                        WidthRequest="250"/>
                <!--Mittels einer Markup-Extension ({}-Klammern) kann eine Property an eine andere Property gebunden werden. Die Property,
                welche die Markup-Extension beinhaltet, gilt als Target-Property-->
                <Label Text="{Binding Source={x:Reference Sdr_Binding}, Path=Value, StringFormat='Wert: {0}'}"/>
            </StackLayout>

            <StackLayout Orientation="Horizontal">
                <Slider Minimum="0"
                    Maximum="100"
                    x:Name="Sdr_Binding2"
                    WidthRequest="250"/>
                <!--Soll der Wert nicht unverandert übertragen werden oder sind die Property-Typen unterschiedlich muss ein Converter
                zwischengeschlatet werden (vgl. FactorConverter.cs)-->
                <Label Text="{Binding Source={x:Reference Sdr_Binding2}, Path=Value, StringFormat='Wert: {0}',
                       Converter={StaticResource factorConverter}, ConverterParameter=2.5}"/>
            </StackLayout>

            <Entry Placeholder="Vorname" x:Name="Entry_FirstName"/>
            <Entry Placeholder="Name" x:Name="Entry_LastName"/>
            <Button Text="OK" x:Name="Btn_OK" Clicked="Btn_OK_Clicked"/>
            <ListView x:Name="LstV_Personen" VerticalOptions="Center">
                <ListView.ItemTemplate>
                    <!--Mittels DataTemplates kann das Erscheinen von einzelnen Elementen von ItemControls (hier ListView) defniert werden.
                    DataTemplates müssen immer ein UI-Element vom Typ Cell beinhalten.-->
                    <DataTemplate>
                        <ViewCell>
                            <!--Innerhalb von ItemControls findet immer ein DataBinding an die Elemente der ItemSource statt (vgl. CodeBehind).
                            Dadurch finden Kurzbindungen an die Properties der Listenelemente statt.-->
                            <Label Text="{Binding}"/>
                            <ViewCell.ContextActions>
                                <MenuItem Text="Delete" Clicked="MenuItem_Clicked"  CommandParameter="{Binding}"/>
                            </ViewCell.ContextActions>
                        </ViewCell>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
            
            <!--Verweis auf Beispiel-Layouts (vgl. CodeBehind und BspLayouts)-->
            <StackLayout Orientation="Horizontal">
                <Button Text="Goto StackÜbung" Clicked="Button_Clicked"/>
                <Button Text="Carousel" Clicked="Button_Clicked_1"/>
                <Button Text="Tabbed" Clicked="Button_Clicked_2"/>
            </StackLayout>
            
            <!--Verweis auf MessagingCenter (vgl. CodeBehind und MC_SubscriberPage.xaml)-->
            <Button Text="MC Send" Clicked="Button_Clicked_3"/>

            <Label x:Name="Lbl_Loc"/>
            <Button x:Name="Btn_Loc"/>

        </StackLayout>
    </ScrollView>

    <!--Wird die ComtentPage in einer Navigation Page angezeigt, hat diese Zugriff auf die ToolBar-->
    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Add" Clicked="Btn_OK_Clicked"/>
        <ToolbarItem Text="Clear" Clicked="ToolbarItem_Clicked"/>
    </ContentPage.ToolbarItems>

</ContentPage>
